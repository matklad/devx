var searchIndex = JSON.parse('{\
"devx_cmd":{"doc":"`devx-cmd` provides more convenient primitives for…","i":[[3,"Error","devx_cmd","Opaque error which happened during command execution.",null,null],[3,"Cmd","","More convenient version of [`std::process::Command`].…",null,null],[3,"ChildProcess","","Wraps [`std::process::Child`], kills and waits for the…",null,null],[6,"Result","","Shortcut for `Result<T, devx_cmd::Error>`",null,null],[11,"new","","Returns a command builder that invokes the binary at…",0,[[]]],[11,"try_at","","Returns a command builder if there is some file available…",0,[[],["option",4]]],[11,"lookup_in_path","","Returns a command builder for the given `bin_name` only if…",0,[[],["option",4]]],[11,"bin","","Set binary path, overwrites the path that was set before.",0,[[]]],[11,"current_dir","","Set the current directory for the child process.",0,[[]]],[11,"echo_cmd","","When set to `true` the command with its arguments will be…",0,[[]]],[11,"echo_err","","When set to `true` the invocation error will be logged to…",0,[[]]],[11,"stdin","","Sets the string input passed to child process\'s `stdin`.…",0,[[]]],[11,"stdin_bytes","","Sets the bytes input passed to child process\'s `stdin`.…",0,[[["vec",3]]]],[11,"arg2","","Same as `cmd.arg(arg1).arg(arg2)`. This is just a…",0,[[]]],[11,"arg","","Appends a single argument to the list of arguments passed…",0,[[]]],[11,"replace_arg","","Replaces the argument at the given index with a new value.",0,[[]]],[11,"args","","Extends the array of arguments passed to the child process…",0,[[]]],[11,"run","","Same as `cmd.spawn()?.wait()` See [`ChildProcess::wait`]…",0,[[],["result",6]]],[11,"read","","Same as `cmd.spawn_piped()?.read()` See…",0,[[],[["string",3],["result",6]]]],[11,"read_bytes","","Same as `cmd.spawn_piped()?.read_bytes()` See…",0,[[],[["vec",3],["result",6]]]],[11,"spawn","","Spawns a child process returning a handle to it. The child…",0,[[],[["childprocess",3],["result",6]]]],[11,"spawn_piped","","Spawns a child process returning a handle to it. Child\'s…",0,[[],[["childprocess",3],["result",6]]]],[11,"wait","","Waits for the process to finish. Returns an error if the…",1,[[],["result",6]]],[11,"read_bytes","","Same as [`ChildProcess::read`] but reads any bytes…",1,[[],[["vec",3],["result",6]]]],[11,"read","","Waits for the process to finish and returns all that it…",1,[[],[["string",3],["result",6]]]],[11,"stdout_lines","","Returns an iterator over the lines of data output to…",1,[[]]],[14,"cmd","","Create a [`Cmd`] with the given binary and arguments.",null,null],[14,"run","","Shortcut for `cmd!(...).run()`. See `Cmd::run` for details",null,null],[14,"read","","Shortcut for `cmd!(...).read()`. See `Cmd::read` for details",null,null],[14,"read_bytes","","Shortcut for `cmd!(...).read_bytes()`. See `Cmd::read` for…",null,null],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"drop","","",1,[[]]],[11,"clone","","",0,[[],["cmd",3]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]]],"p":[[3,"Cmd"],[3,"ChildProcess"],[3,"Error"]]},\
"devx_pre_commit":{"doc":"`devx-pre-commit` provides utilities for creating git…","i":[[3,"PreCommitContext","devx_pre_commit","Represents the API entrypoint of the git pre-commit hook.…",null,null],[5,"install_self_as_hook","","Copies the [`current_exe`] file to…",null,[[],["result",6]]],[5,"locate_project_root","","Searches for a project root dir, which is a directory that…",null,[[],[["result",6],["pathbuf",3]]]],[11,"from_git_diff","","Creates the git pre-commit context acquiring the staged…",0,[[],["result",6]]],[11,"staged_files","","Returns an iterator over all the files staged for the…",0,[[]]],[11,"retain_staged_files","","Accepts a function predicate that accepts a relative path…",0,[[]]],[11,"touched_crates","","Returns the names of the crates that contain…",0,[[],[["vec",3],["string",3]]]],[11,"staged_rust_files","","Returns an iterator over all staged files with `.rs`…",0,[[]]],[11,"rustfmt","","Runs `cargo fmt` against the [`touched_crates`]",0,[[],["result",6]]],[11,"stage_new_changes","","Pushes the changes introduced to staged files in the…",0,[[],["result",6]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]]],"p":[[3,"PreCommitContext"]]},\
"xtask":{"doc":"","i":[[0,"pre_commit","xtask","",null,null],[5,"run_hook","xtask::pre_commit","",null,[[],["result",6]]],[5,"install_hook","","",null,[[],["result",6]]]],"p":[]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);